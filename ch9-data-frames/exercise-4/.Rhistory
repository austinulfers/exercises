source('C:/Users/austi/OneDrive/UW/Freshman/Info 201/Exercises/exercises/ch9-data-frames/exercise-2/exercise.R')
# What was the 2018 salary of employee 57
salaries[57,"salaries_2018"]
# How many employees got a raise?
nrow(salaries$change)
# How many employees got a raise?
nrow(salaries$got_raise)
# How many employees got a raise?
sum(salaries$got_raise)
# What was the dollar value of the highest raise?
highest_raise <- max(salaries$change)
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
usexp <- data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(usexp)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
usexp <- data.frame(usexp)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
usexp <- data.frame("USPersonalExpenditure")
View(usexp)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
us_per_exp <- data.frame("USPersonalExpenditure")
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
usexp <- data("USPersonalExpenditure")
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
us_per_exp <- data.frame(USPersonalExpenditure)
View(us_per_exp)
# What are the column names of your dataframe?
col_names = colnames(us_per_exp)
# What are the row names of your dataframe?
row_names = rownames(us_per_exp)
# Add a column "category" to your data frame that contains the rownames
us_per_exp$category = row_names
# How much money was spent on personal care in 1940?
us_per_exp$X1940["Personal Care"]
# How much money was spent on personal care in 1940?
us_per_exp$X1940[4]
# How much money was spent on Food and Tobacco in 1960?
us_per_exp$X1960[1]
# What was the highest expenditure category in 1960?
max(us_per_exp$X1960)
lowest_category = function(year){
min(us_per_exp$paste('X', year, sep = ""))
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(lowest_category(1960))
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
(lowest_category(1960))
# What was the highest expenditure category in 1960?
max(us_per_exp$X1960)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv", stringsAsFactors = F)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv(data/gates_money.csv, stringsAsFactors = F)
setwd("C:/Users/austi/OneDrive/UW/Freshman/Info 201/Exercises/exercises/ch9-data-frames/exercise-4")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv", stringsAsFactors = F)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# What was the mean grant value?
mean(grants$total_amount)
# What was the dollar amount of the largest grant?
max(grants$total_amount)
# What was the dollar amount of the smallest grant?
min(grants$total_amount)
# Which organization received the largest grant?
grants$organization[max(grants$total_amount) == grants$total_amount]
# Which organization received the smallest grant?
grants$organization[min(grants$total_amount) == grants$total_amount]
# How many grants were awarded in 2010?
nrow(grants)
# How many grants were awarded in 2010?
nrow(grants$start_year)
# How many grants were awarded in 2010?
sum(grants$start_year)
# How many grants were awarded in 2010?
nrow(grants$start_year == 2010)
# How many grants were awarded in 2010?
nrow(grants$start_year[2010])
grants$start_year[2010]
grants$start_year == 2010
# How many grants were awarded in 2010?
sum(grants$start_year == 2010)
# What was the highest expenditure category in 1960?
us_per_exp$category[max(us_per_exp$X1960)]
source('C:/Users/austi/OneDrive/UW/Freshman/Info 201/Exercises/exercises/ch9-data-frames/exercise-3/exercise.R')
# What was the highest expenditure category in 1960?
us_per_exp$category[max(us_per_exp$X1960)]
# What was the highest expenditure category in 1960?
us_per_exp$category[max(us_per_exp$X1960) == us_per_exp]
# What was the highest expenditure category in 1960?
us_per_exp$category[max(us_per_exp$X1960) == us_per_exp$X1960]
paste('X', year, sep = "")
year = 1960
paste('X', year, sep = "")
lowest_category = function(year){
col = paste('X', year, sep = "")
us_per_exp$category[min(us_per_exp$col) == us_per_exp$col]
}
# What was the highest expenditure category in 1960?
rownames([)max(us_per_exp$X1960) == us_per_exp$X1960]
# What was the highest expenditure category in 1960?
rownames([max(us_per_exp$X1960) == us_per_exp$X1960])
# What was the highest expenditure category in 1960?
rownames(max(us_per_exp$X1960) == us_per_exp$X1960)
us_per_exp$category
rownames(us_per_exp)
# What was the highest expenditure category in 1960?
rownames(us_per_exp, [max(us_per_exp$X1960) == us_per_exp$X1960])
# What was the highest expenditure category in 1960?
rownames(us_per_exp, max(us_per_exp$X1960) == us_per_exp$X1960)
us_per_exp$category
# What was the highest expenditure category in 1960?
us_per_exp$category[max(us_per_exp$X1960) == us_per_exp$X1960]
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(lowest_category(seq(1940,1960,5)))
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(us_per_exp, lowest_category(seq(1940,1960,5)))
?sapply
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(us_per_exp, lowest_category(), seq(1940,1960,5))
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(lowest_category(), seq(1940,1960,5))
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(ulowest_category(seq(1940,1960,5)))
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(lowest_category(seq(1940,1960,5)))
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(seq(1940,1960,5), lowest_category())
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(seq(1940,1960,5), lowest_category
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(seq(1940,1960,5), lowest_category)
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(seq(1940,1960,5), lowest_category)
seq(1940,1960,5)
