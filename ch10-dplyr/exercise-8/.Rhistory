lintr:::addin_lint()
source('C:/Users/austi/OneDrive/UW/Freshman/Info 201/Homework/a3-using-data-austinulfers/assignment.r')
styler:::style_active_file()
lintr:::addin_lint()
styler:::style_active_file()
lintr:::addin_lint()
source('C:/Users/austi/OneDrive/UW/Freshman/Info 201/Homework/a3-using-data-austinulfers/assignment.r')
setwd("C:/Users/austi/OneDrive/UW/Freshman/Info 201/Homework/a3-using-data-austinulfers")
source('C:/Users/austi/OneDrive/UW/Freshman/Info 201/Homework/a3-using-data-austinulfers/assignment.r')
styler:::style_active_file()
lintr:::addin_lint()
lintr:::addin_lint()
setwd("C:/Users/austi/OneDrive/UW/Freshman/Info 201/Exercises/exercises/ch10-dplyr/exercise-4")
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library(dplyr)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages(nycflights13)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
library(nycflights13)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
nrow(flights)
ncol(flights)
colnames(flights)
??flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, time_change = dep_delay + arr_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
desc(flights, time_change)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, time_change = dep_delay + arr_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
desc(flights, time_change)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
desc(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(flights, desc = time_change)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
View(arrange(flights, desc = time_change))
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
View(arrange(flights))
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
View(arrange(flights, time_change))
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, -time_change)
View(flights)
# Make a histogram of the amount of time gained using the `hist()` function
hist(select(flights, time_change))
# Make a histogram of the amount of time gained using the `hist()` function
hist(select(flights, time_change, year))
# Make a histogram of the amount of time gained using the `hist()` function
hist(select(flights, year, time_change))
select(flights, year, time_change)
# Make a histogram of the amount of time gained using the `hist()` function
hist(select(flights, time_change))
# Make a histogram of the amount of time gained using the `hist()` function
hist(select(flights$time_change))
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$time_change)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
nrow(filter(flights, time_change < 0))
nrow(filter(flights, time_change > 0))
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(select(flights, time_change))
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(flights$time_change)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(flights$time_change, na.rm = TRUE)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(flights$time_change, na.rm = TRUE) < 0
flights %>%
filter(dest = "SEA") %>%
select(origin, dest, time_change)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
flights %>%
filter(dest == "SEA") %>%
select(origin, dest, time_change)
flights %>%
filter(dest == "SEA") %>%
select(origin, dest, time_change)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
planes_to_sea <- flights %>%
filter(dest == "SEA") %>%
select(origin, dest, time_change)
# On average, did flights to SeaTac gain or loose time?
mean(planes_to_sea$time_change, na.rm = TRUE)
# On average, did flights to SeaTac gain or loose time?
mean(planes_to_sea$time_change, na.rm = TRUE) < 0
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(flights$gain_in_air, na.rm = TRUE) > 0
source('C:/Users/austi/OneDrive/UW/Freshman/Info 201/Exercises/exercises/ch10-dplyr/exercise-4/exercise.R')
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
View(flights)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- group_by(flights, month) %>%
summarise(avg_dep_delay = mean(dep_delay, na.rm = T))
View(dep_delay_by_month)
# Which month had the greatest average departure delay?
largest_avg_dep_delay <- filter(dep_delay_by_month, max(avg_dep_delay)) %>%
select(month)
filter(dep_delay_by_month, max(avg_dep_delay))
# Which month had the greatest average departure delay?
largest_avg_dep_delay <- filter(dep_delay_by_month,
max(dep_delay_by_month$avg_dep_delay)) %>%
select(month)
max(dep_delay_by_month$avg_dep_delay)
filter(dep_delay_by_month,
max(dep_delay_by_month$avg_dep_delay))
# Which month had the greatest average departure delay?
largest_avg_dep_delay <- filter(dep_delay_by_month) %>%
summarize(max(avg_dep_delay))
filter(dep_delay_by_month) %>%
summarize(max(avg_dep_delay))
summarize(max(avg_dep_delay)
filter(dep_delay_by_month)
# Which month had the greatest average departure delay?
largest_avg_dep_delay <- dep_delay_by_month %>%
summarize(max(avg_dep_delay))
# Which month had the greatest average departure delay?
largest_avg_dep_delay <- dep_delay_by_month %>%
summarize(max = max(avg_dep_delay))
# Which month had the greatest average departure delay?
largest_avg_dep_delay <- dep_delay_by_month %>%
filter( avg_dep_delay == max(avg_dep_delay)) %>%
select(month)
# Which month had the greatest average departure delay?
largest_avg_dep_delay <- dep_delay_by_month %>%
filter(avg_dep_delay == max(avg_dep_delay))
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create
# a scatterplot by passing that data frame to the 'plot()' function
plot(largest_avg_dep_delay)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
dest <- group_by(dep_delay_by_month, month)
View(dest)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
dest <- group_by(dep_delay_by_month, dest)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
dest <- group_by(flights, dest)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
destin <- group_by(flights, dest)
View(destin)
destin <- group_by(flights, dest)
plot(dep_delay_by_month)
titanic_data$Age
source('C:/Users/austi/OneDrive/UW/Freshman/Info 201/Homework/a3-using-data-austinulfers/assignment.r')
titanic_data$Age
country_change("Haiti")
source('C:/Users/austi/OneDrive/UW/Freshman/Info 201/Homework/a3-using-data-austinulfers/assignment.r')
setwd("C:/Users/austi/OneDrive/UW/Freshman/Info 201/Exercises/exercises/ch10-dplyr/exercise-5")
setwd("C:/Users/austi/OneDrive/UW/Freshman/Info 201/Homework/a3-using-data-austinulfers")
country_change("Haiti")
# Load the dplyr library
library(dplyr)
# Read in the data (from `data/pupulitzer-circulation-data.csv`). Remember to
# not treat strings as factors!
pup <- read.csv("data/pupulitzer-circulation-data.csv")
setwd("C:/Users/austi/OneDrive/UW/Freshman/Info 201/Exercises/exercises/ch10-dplyr/exercise-8")
# Read in the data (from `data/pupulitzer-circulation-data.csv`). Remember to
# not treat strings as factors!
pup <- read.csv("data/pupulitzer-circulation-data.csv")
# Read in the data (from `data/pupulitzer-circulation-data.csv`). Remember to
# not treat strings as factors!
pup <- read.csv("data/pupulitzer-circulation-data.csv")
# View in the data set. Start to understand what the data set contains
View(pup)
# Read in the data (from `data/pupulitzer-circulation-data.csv`). Remember to
# not treat strings as factors!
pup <- read.csv("data/pupulitzer-circulation-data.csv")
# View in the data set. Start to understand what the data set contains
View(pup)
# Read in the data (from `data/pupulitzer-circulation-data.csv`). Remember to
# not treat strings as factors!
pup <- read.csv("data/pulitzer-circulation-data.csv")
# View in the data set. Start to understand what the data set contains
View(pup)
source('C:/Users/austi/OneDrive/UW/Freshman/Info 201/Exercises/exercises/ch10-dplyr/exercise-8/exercise.R')
# Print out the names of the columns for reference
print(colnames(pup))
# Use the 'str()' function to also see what types of values are contained in
# each column (you're looking at the second column after the `:`)
# Did any value type surprise you? Why do you think they are that type?
str(pup$Change.in.Daily.Circulation..2004.2013)
# Add a column to the data frame called 'Pulitzer.Prize.Change` that contains
# the difference in the number of times each paper was a winner or finalist
# (hereafter "winner") during 2004-2014 and during 1990-2003
pup <- pup %>%
mutate(Pulitzer.Prize.Change, pup$Pulitzer.Prize.Winners.and.Finalists..2004.2014 -
pup$Pulitzer.Prize.Winners.and.Finalists..1990.2003)
# Add a column to the data frame called 'Pulitzer.Prize.Change` that contains
# the difference in the number of times each paper was a winner or finalist
# (hereafter "winner") during 2004-2014 and during 1990-2003
pup <- pup %>%
mutate(Pulitzer.Prize.Change, strtoi(pup$Pulitzer.Prize.Winners.and.Finalists..2004.2014) -
strtoi(pup$Pulitzer.Prize.Winners.and.Finalists..1990.2003))
vehicles <- mtcars %>% mutate(name = row.names(mtcars))
BestGearsCyl <- functon(gears, cylinders) {
ret <- vehicles %>%
filter(gear == gears, cyl == cylinders) %>%
filter(mgp = max(mpg)) %>%
select(car)
}
mtcars %>% mutate(name = row.names(mtcars))
vehicles %>%
filter(gear == gears, cyl == cylinders)
BestGearsCyl <- function(gears, cylinders) {
ret <- vehicles %>%
filter(gear == gears, cyl == cylinders) %>%
filter(mgp = max(mpg)) %>%
select(car)
}
# Get the best mpg car for 6 cylinder cars with 4 gears
answer <- BestGearsCyl(6, 4)
# Get the best mpg car for 6 cylinder cars with 4 gears
answer <- BestGearsCyl(6, 4)
BestGearsCyl <- function(gears, cylinders) {
ret <- vehicles %>%
filter(gear == gears, cyl == cylinders) %>%
filter(mgp == max(mpg)) %>%
select(car)
}
# Get the best mpg car for 6 cylinder cars with 4 gears
answer <- BestGearsCyl(6, 4)
BestGearsCyl <- function(gears, cylinders) {
ret <- vehicles %>%
filter(gear == gears, cyl == cylinders) %>%
filter(mgp == max(mpg)) %>%
select(name)
}
# Get the best mpg car for 6 cylinder cars with 4 gears
answer <- BestGearsCyl(6, 4)
vehicles %>%
filter(gear == gears, cyl == cylinders) %>%
filter(mgp == max(mpg))
View(vehicles)
gears <- 6
cylinders <- 4
vehicles %>%
filter(gear == gears, cyl == cylinders) %>%
filter(mgp == max(mpg))
vehicles %>%
filter(gear == gears, cyl == cylinders)
gear == gears
vehicles %>%
filter(gear == gears, cyl == cylinders)
vehicles %>%
filter(gear == gears, cyl == cylinders) %>%
filter(mpg == max(mpg)) %>%
select(name)
vehicles %>%
filter(gear == gears)
filter(vehicles, gear == gears)
cylinders <- 6
gears <- 4
# Get the best mpg car for 6 cylinder cars with 4 gears
answer <- BestGearsCyl(4, 6)
BestGearsCyl <- function(gears, cylinders) {
ret <- vehicles %>%
filter(gear == gears, cyl == cylinders) %>%
filter(mpg == max(mpg)) %>%
select(name)
}
# Get the best mpg car for 6 cylinder cars with 4 gears
answer <- BestGearsCyl(4, 6)
base <- "https://api.github.com"
uri.full <- past0(base.uri, resource)
library(dplyr)
base.uri <- "https://api.github.com"
resource <- past0("/users/", "austinu", "/repos")
uri.full <- past0(base.uri, resource)
source('~/.active-rstudio-document')
print(uri.full)
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library(httr)
library(jsonlite)
library(dplyr)
# Create a variable for the API's base URI (https://api.github.com)
base.uri <- "https://api.github.com"
# Under the "Repositories" category, find the endpoint that will list repos in
# an organization
# Create a variable `resource` that represents the endpoint for the book
# organization (you can use `paste0()` to construct this, or enter it manually)
resource <- "/repositories/info201"
# Send a GET request to this endpoint (the base.uri followed by the resource)
# and extract the response body
GET(paste0(base.uri, resource))
# Send a GET request to this endpoint (the base.uri followed by the resource)
# and extract the response body
response <- GET(paste0(base.uri, resource))
# Convert the body from JSON into a data frame
response_content <- content(response, "text")
print(response_content)
source('C:/Users/austi/OneDrive/UW/Freshman/Info 201/Exercises/exercises/ch11-apis/exercise-1/exercise.R')
source('C:/Users/austi/OneDrive/UW/Freshman/Info 201/Exercises/exercises/ch11-apis/exercise-1/exercise.R')
body_data <- fromJSON(response_content)
is.data.frame(body_data)
View(body_data)
# How many (public) repositories does the organization have?
sum(body_data$private)
# Use a "Search" endpoint to search for repositories about "visualization" whose
# language includes "R"
# Reassign the `resource` variable to refer to the appropriate resource.
resource <- "/v3/search/#search-repositories"
